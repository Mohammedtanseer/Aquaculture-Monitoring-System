#include <SoftwareSerial.h>
#include <dht11.h>
#define RX 3
#define TX 2
#define dht_apin 11 // Analog Pin sensor is connected to
dht11 dhtObject;
String AP = "HHMP HOUSE";       // AP NAME
String PASS = "Pass"; // AP PASSWORD
String API = "IYIHDY12T51M2QCP";   // Write API KEY
String HOST = "api.thingspeak.com";
String PORT = "80";
int countTrueCommand;
int countTimeCommand; 
boolean found = false; 
int valSensor = 1;
const int sampleWindow = 50;                              // Sample window width in mS (50 mS = 20Hz)
unsigned int sample; 
#define SENSOR_PIN A0
#include <Servo.h>
Servo servo1;
SoftwareSerial esp8266(RX,TX); 
  void setup() {
  Serial.begin(9600);
  esp8266.begin(115200);
  sendCommand("AT",5,"OK");
  sendCommand("AT+CWMODE=3",5,"OK");
  sendCommand("AT+CWJAP=\""+ AP +"\",\""+ PASS +"\"",20,"OK");
   pinMode (SENSOR_PIN, INPUT); // Set the signal pin as input
   servo1.attach(6);
   pinMode(12,OUTPUT);
}
void loop() {
   dhtObject.read(dht_apin);
   int humidity = dhtObject.humidity;
   if(humidity > 70)
  {
    digitalWrite(12,HIGH);
    servo1.write(120);
    delay(1000);
    servo1.write(0);
    delay(1000);
  }
  else
  {
    digitalWrite(12,LOW);
  }
  
  
 String getData = "GET /update?api_key="+ API +"&field1="+getTemperatureValue()+"&field2="+getHumidityValue()+"&field3="+getsoundvalue();
 delay(1500);
 sendCommand("AT+CIPMUX=1",5,"OK");
 delay(50);
 sendCommand("AT+CIPSTART=0,\"TCP\",\""+ HOST +"\","+ PORT,15,"OK");
 delay(50);
 sendCommand("AT+CIPSEND=0," +String(getData.length()+4),4,">");
 delay(50);
 esp8266.println(getData);
 delay(1500);
 countTrueCommand++;
 delay(50);
 sendCommand("AT+CIPCLOSE=0",5,"OK");
 delay(50);
}
String getTemperatureValue(){
   dhtObject.read(dht_apin);
   Serial.print(" Temperature(C)= ");
   int temp = dhtObject.temperature;
   Serial.println(temp); 
   delay(50);
   return String(temp); 
}

String getHumidityValue(){
   dhtObject.read(dht_apin);
   Serial.print(" Humidity in %= ");
   int humidity = dhtObject.humidity;
   Serial.println(humidity);
   delay(50);
   return String(humidity); 
   if(humidity < 71)
  {
    digitalWrite(12,HIGH);
    servo1.write(90);
    delay(1000);
    servo1.write(0);
    delay(1000);    
  }
  else
  {
    digitalWrite(12,LOW);
  }
  delay(10000);
}
String getsoundvalue(){  
   unsigned long startMillis= millis();                   // Start of sample window
   float peakToPeak = 0;                                  // peak-to-peak level
 
   unsigned int signalMax = 0;                            //minimum value
   unsigned int signalMin = 1024;                         //maximum value
 
                                                          // collect data for 50 mS
   while (millis() - startMillis < sampleWindow)
   {
      sample = analogRead(SENSOR_PIN);                    //get reading from microphone
      if (sample < 1024)                                  // toss out spurious readings
      {
         if (sample > signalMax)
         {
            signalMax = sample;                           // save just the max levels
         }
         else if (sample < signalMin)
         {
            signalMin = sample;                           // save just the min levels
         }
      }
   }
 
   peakToPeak = signalMax - signalMin;                    // max - min = peak-peak amplitude
   Serial.print(" Decibals= ");
  int db = map(peakToPeak,20,900,49.5,90);                 //calibrate for deciBels
  Serial.println(db);
   delay(50);
   return String(db);  
}
void sendCommand(String command, int maxTime, char readReplay[]) {
  Serial.print(countTrueCommand);
  Serial.print(". at command => ");
  Serial.print(command);
  Serial.print(" ");
  while(countTimeCommand < (maxTime*1))
  {
    esp8266.println(command);//at+cipsend
    if(esp8266.find(readReplay))//ok
    {
      found = true;
      break;
    }
    countTimeCommand++;
  }
  if(found == true)
  {
    Serial.println("OYI");
    countTrueCommand++;
    countTimeCommand = 0;
  }
  
  if(found == false)
  {
    Serial.println("Fail");
    countTrueCommand = 0;
    countTimeCommand = 0;
  }
  found = false;
  }

